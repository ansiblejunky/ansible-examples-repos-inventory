---
    # For more information see this:
    # https://docs.ansible.com/ansible-tower/latest/html/upgrade-migration-guide/virtualenv.html
    - name: Create virtualenv on all Tower nodes
      hosts: all:!database*
      gather_facts: false
    
      vars:
      # Define tower authentication
      - tower_host: "https://tower.example.com"
      - tower_url: "https://tower.example.com/api/v2/"
      - tower_username: "admin"
      - tower_password: "{{ admin_password }}"
    
      # Define virtual environment
      - virtualenv_name: "custom-venv"
      - virtualenv_base: "/opt/my-envs/"
      - virtualenv_path: "{{ virtualenv_base }}{{ virtualenv_name }}"
      # Define dependencies - note that `psutil` is required to properly run playbooks (eg., fact gathering)
      - virtualenv_python_dependencies:
          # Base required packages
          - psutil
    
          # Windows required python packages
          - pywinrm
          # https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html#installing-the-kerberos-library
          - pywinrm[kerberos]
     
          # VMware required python packages
          - pyvmomi
          - 'git+https://github.com/vmware/vsphere-automation-sdk-python.git'
    
          # AWS required python packages
          - boto3
          - botocore
          
          # tower-cli used typically on localhost or control node
          #- ansible-tower-cli
          
          # Add Ansible Engine *only if* you want to use a different version
          #- 'ansible == X.Y.Z'
    
      # Define what Tower objects can use this virtual environment
      # Supported objects: organizations, projects, inventory_sources, job_templates
      # Enable virtual environment at organization level means its available for all objects associated to that org
      - tower_objects:
          -
            type: 'organizations'
            id: 1
    
      tasks:
    
      # https://docs.ansible.com/ansible/latest/user_guide/windows_winrm.html#installing-the-kerberos-library
      - name: Ensure system packages for Windows targets using Kerberos
        package:
          name: gcc, python3-devel, krb5-devel, krb5-libs, krb5-workstation
          state: present
    
      - name: Ensure system packages to support pip packages
        package:
          name: gcc, python3-devel
          state: present
    
      - name: Ensure system packages to support git, json (jq) and other operations
        package:
          name: jq, git, tree
          state: present
    
      - name: Ensure directory exists
        file:
          path: "{{ virtualenv_base }}"
          state: directory
          mode: 0755
        become: true
    
      - name: Install virtualenv via pip
        pip:
          name: virtualenv
          executable: pip3
        become: true
    
      - name: Ensure virtualenv is created and upgrade pip to support newer python packages
        pip:
          name: pip
          virtualenv: "{{ virtualenv_path }}"
          state: latest
          virtualenv_python: python3
          virtualenv_command: /usr/local/bin/virtualenv
          # Remove this when installing custom ansible version
          virtualenv_site_packages: yes
        become: true
    
      - name: Install python packages into virtualenv
        pip:
          name: "{{ virtualenv_python_dependencies }}"
          virtualenv: "{{ virtualenv_path }}"
          state: present
          virtualenv_python: python3
        become: true
    
      - name: Enable virtual environment in Ansible Tower
        tower_settings:
          name: "CUSTOM_VENV_PATHS"
          value:
            - "{{ virtualenv_base }}"
          tower_host: "{{ tower_host }}"
          tower_username: "{{ tower_username }}"
          tower_password: "{{ tower_password }}"
          validate_certs: False
        register: _testing_settings
        delegate_to: localhost
        run_once: True
    
      - name: Assign virtualenv to objects
        uri:
          url: '{{ tower_url }}{{ item.type }}/{{ item.id }}/'
          method: PATCH
          body_format: json
          body: >
            { "custom_virtualenv": "{{ virtualenv_path }}" }
          force_basic_auth: yes
          user: "{{ tower_username }}"
          password: "{{ tower_password }}"
          validate_certs: false
        loop: "{{ tower_objects }}"
        delegate_to: localhost
        run_once: True
    